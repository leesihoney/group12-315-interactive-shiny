country_cords[which(country_cords$Country == 'East Timor'),3] <- mean(countries[which(countries$region == "Timor-Leste"),1])
country_cords[which(country_cords$Country == 'East Timor'),4] <- round(median(countries[which(countries$region == "Timor-Leste"),3]))
#country_cords$Country[country_cords$Country == "East Timor"] <- "Timor-Leste"
country_cords[which(country_cords$Country == 'Trinidad and Tobago'),2] <- mean(countries[which(countries$region == "Trinidad" | countries$region == "Tobago"),2])
country_cords[which(country_cords$Country == 'Trinidad and Tobago'),3] <- mean(countries[which(countries$region == "Trinidad" | countries$region == "Tobago"),1])
country_cords[which(country_cords$Country == 'Trinidad and Tobago'),4] <- round(median(countries[which(countries$region == "Trinidad" | countries$region == "Tobago"),3]))
#country_cords$Country[country_cords$Country == "Trinidad and Tobago"] <- "Trinidad"
country_cords[which(country_cords$Country == 'Saint Kitts and Nevis'),2] <- mean(countries[which(countries$region == "Saint Kitts" | countries$region == "Nevis"),2])
country_cords[which(country_cords$Country == 'Saint Kitts and Nevis'),3] <- mean(countries[which(countries$region == "Saint Kitts" | countries$region == "Nevis"),1])
country_cords[which(country_cords$Country == 'Saint Kitts and Nevis'),4] <- round(median(countries[which(countries$region == "Saint Kitts" | countries$region == "Nevis"),3]))
#country_cords$Country[country_cords$Country == "Saint Kitts and Nevis"] <- "Saint Kitts"
country_cords[which(country_cords$Country == 'Antigua and Barbuda'),2] <- mean(countries[which(countries$region == "Antigua" | countries$region == "Barbuda"),2])
country_cords[which(country_cords$Country == 'Antigua and Barbuda'),3] <- mean(countries[which(countries$region == "Antigua" | countries$region == "Barbuda"),1])
country_cords[which(country_cords$Country == 'Antigua and Barbuda'),4] <- round(median(countries[which(countries$region == "Antigua" | countries$region == "Barbuda"),3]))
#country_cords$Country[country_cords$Country == "Antigua and Barbuda"] <- "Antigua"
immigrants_nat.2017 <- immigrants_nationality[which(immigrants_nationality$Year == 2017),]
nation_list <- unique(immigrants_nat.2017$Nationality)
nation.immigrants_nat.2017 <- data.frame()
for (i in 1:length(nation_list)){
curr.country <- nation_list[i]
curr.country.data <- immigrants_nat.2017[which(immigrants_nat.2017$Nationality == curr.country),]
curr.population.sum <-  sum(curr.country.data$Number)
curr.data.frame <- data.frame(Country = curr.country, population = curr.population.sum)
nation.immigrants_nat.2017 <- rbind(nation.immigrants_nat.2017,curr.data.frame)
}
all.immigrants.2017.data <- merge(nation.immigrants_nat.2017,country_cords, by = intersect("Country", "Country"))
all.immigrants.2017.data$Country <- as.character(all.immigrants.2017.data$Country)
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "United States"] <- "USA"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "Brasil"] <- "Brazil"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "United Kingdom"] <- "UK"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "Camerun"] <- "Cameroon"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "State of Palestine"] <- "Palestine"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "Cambodja"] <- "Cambodia"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "The Bahamas"] <- "Bahamas"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "East Timor"] <- "Timor-Leste"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "Trinidad and Tobago"] <- "Trinidad"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "Saint Kitts and Nevis"] <- "Saint Kitts"
all.immigrants.2017.data$Country[all.immigrants.2017.data$Country == "Antigua and Barbuda"] <- "Antigua"
colnames(countries)[which(names(countries) == "region")] <- "Country"
temp <- data.frame(Country = all.immigrants.2017.data$Country, population = all.immigrants.2017.data$population)
new_data.2017 <- left_join(countries, temp, by = "Country")
# Converts a numeric array to an array of latitude labels
latitude <- function(x)
paste0(format(x, digits = 3), "° ", ifelse(x > 0, "N", "S"))
# Converts a numeric array to an array of longitude labels
longitude <- function(x)
paste0(format(x, digits = 3), "° ", ifelse(x > 0, "E", "W"))
barcelona_immigrants.2017.map <- ggplot(new_data.2017,
aes(x = long,
y = lat,
group = group,
fill = population)) +
geom_polygon(aes(x = long + 0.005, y = lat - 0.002),
color = "grey50", size = 0.2, fill = "grey50") +
geom_polygon(color = "gray10", size = 0.2) +
coord_equal() +
labs(title = "Choropleth Map: Barcelona Immigrants Nationality",
subtitle = "Year: 2017",
fill = "Population") +
theme_void() +
theme(panel.background = element_rect(fill = NA, colour = "#cccccc"),
text = element_text(family = "Arial Narrow", size = 8),
plot.title = element_text(size = 12, face = "bold"),
plot.margin = unit(c(0, 0.25, 0.0, 0.25), "in"),
panel.border = element_rect(fill = NA, colour = "#cccccc"),
legend.text = element_text(size = 8),
legend.position = "bottom") +
scale_y_continuous(labels = latitude) +
scale_x_continuous(labels = longitude) +
theme(axis.text = element_text(size = 8, colour = "#333333")) +
ggsn::north(new_data.2017, location = "bottomright", symbol = 10)
barcelona_immigrants.2017.map
shiny::runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
View(all.immigrants.2017.data)
unique(map_data("world2")$region)
immigrants_nat <- immigrants_nationality[which(immigrants_nationality$Year == "2017"),]
unique(immigrants_nat$Nationality)
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
strcmp(c("yes", "no"), c("yes", "no"))
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
?nrow
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
?as.factor
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
typeof(data.frame())
typeof(df$User_ID)
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
install.packages("ggdendro")
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
?wordcloud
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
install.packages("wordcloud")
library(sp)
library(maps)
library(maptools)
library(leaflet)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
# https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json
world <- geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
class(world)
world <- map_data("world2")
library(sp)
library(maps)
library(maptools)
library(leaflet)
library(igraph)
library(igraphdata)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
# https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json
world <- geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
class(world)
world <- map_data("world2")
knitr::opts_chunk$set(echo = TRUE)
WorldCountry <-geojsonio::geojson_read("./GeoData/countries.geo.json", what = "sp")
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
#Dataframe for choropleth map
Country <- c("Bulgaria","Pakistan","Turkey")
Projects <- c(2,1,6)
data <- data.frame(Country,Projects)
#basemap
Map <- leaflet(WorldCountry) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
bins <- c(0,1,2,3,4,5,6,7,8,9,10,Inf)
pal <- colorBin("YlOrRd", domain = data$Projects, bins = bins)
#set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g projects <sup></sup>",
data$Country, data$Projects) %>% lapply(htmltools::HTML)
#add polygons,labels and mouse over effect
Map %>% addPolygons(
fillColor = ~pal(data$Projects),
weight = 2,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
#Dataframe for choropleth map
Country <- c("Bulgaria","Pakistan","Turkey")
Projects <- c(2,1,6)
data <- data.frame(Country,Projects)
#basemap
Map <- leaflet(WorldCountry) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
bins <- c(0,1,2,3,4,5,6,7,8,9,10,Inf)
pal <- colorBin("YlOrRd", domain = data$Projects, bins = bins)
#set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g projects <sup></sup>",
data$Country, data$Projects) %>% lapply(htmltools::HTML)
#add polygons,labels and mouse over effect
Map %>% addPolygons(
fillColor = ~pal(data$Projects),
weight = 1,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
#Dataframe for choropleth map
Country <- c("Bulgaria","Pakistan","Turkey")
Projects <- c(2,1,6)
data <- data.frame(Country,Projects)
#basemap
Map <- leaflet(WorldCountry) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
bins <- c(0,1,2,3,4,5,6,7,8,9,10,Inf)
pal <- colorBin("YlOrRd", domain = data$Projects, bins = bins)
#set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g projects <sup></sup>",
data$Country, data$Projects) %>% lapply(htmltools::HTML)
#add polygons,labels and mouse over effect
Map %>% addPolygons(
fillColor = ~pal(data$Projects),
weight = 1,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = ~cut_range, opacity = 0.7, title = NULL,
position = "bottomright")
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
#Dataframe for choropleth map
Country <- c("Bulgaria","Pakistan","Turkey")
Projects <- c(2,1,6)
data <- data.frame(Country,Projects)
#basemap
Map <- leaflet(WorldCountry) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
bins <- c(0,1,2,3,4,5,6,7,8,9,10,Inf)
pal <- colorBin("YlOrRd", domain = data$Projects, bins = bins)
#set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g projects <sup></sup>",
data$Country, data$Projects) %>% lapply(htmltools::HTML)
#add polygons,labels and mouse over effect
Map %>% addPolygons(
fillColor = ~pal(data$Projects),
weight = 1,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = data$Projects, opacity = 0.7, title = NULL,
position = "bottomright")
View(WorldCountry)
?left_join
WorldCountry$name
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
colnames(WorldCountry)[which(names(WorldCountry) == "name")] <- "Country"
colnames(WorldCountry)
WorldCountry$name
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
colnames(WorldCountry)[which(names(WorldCountry) == "name")] <- "Country"
names(WorldCountry)
str(WorldCountry)
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
newobj <- merge(WorldCountry, all.immigrants.2017.data, by.x="name", by.y="Country")
names(newobj@data)
#basemap
Map <- leaflet(WorldCountry) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
quartile_calculation <- temp[order(temp$population), ]
temp_median <- median(quartile_calculation$population)
lower <- quartile_calculation[1:round(nrow(quartile_calculation)/2),]
upper <- quartile_calculation[round((nrow(quartile_calculation)/2)+1):nrow(quartile_calculation),]
lower_median <- median(lower$population)
upper_median <- median(upper$population)
bins <- c(0, lower_median, temp_median, upper_median, max(temp$population))
pal <- colorBin("YlOrRd", domain = worldCountry$population, bins = bins)
newobj@data$name
newobj@data$population
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
newobj <- merge(WorldCountry, all.immigrants.2017.data, by.x="name", by.y="Country")
names(newobj@data)
#basemap
Map <- leaflet(newobj) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
quartile_calculation <- newobj@data[order(newobj@data$population), ]
temp_median <- median(quartile_calculation$population)
lower <- quartile_calculation[1:round(nrow(quartile_calculation)/2),]
upper <- quartile_calculation[round((nrow(quartile_calculation)/2)+1):nrow(quartile_calculation),]
lower_median <- median(lower$population)
upper_median <- median(upper$population)
bins <- c(0, lower_median, temp_median, upper_median, max(newobj@data$population))
pal <- colorBin("YlOrRd", domain = newobj@data$population, bins = bins)
#set labels
labels <- sprintf(
"<strong>%s</strong><br/>Projects: %g",
newobj@data$name, newobj@data$population) %>% lapply(htmltools::HTML)
#add polygons,labels and mouse over effect
Map %>% addPolygons(
fillColor = ~pal(newobj@data$population),
weight = 1,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = newobj@data$population, opacity = 0.7, title = NULL,
position = "bottomright")
View(quartile_calculation)
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
for (i in 1:length(all.immigrants.2017.data$Country)) {
curr.country <- all.immigrants.2017.data$Country[i]
if(curr.country %in% WorldCountry@data$name == FALSE) {
new_c <- c(curr.country)
}
}
new_c
View(all.immigrants.2017.data)
"UK" %in% WorldCountry@data$name
"United Kingdom" %in% WorldCountry@data$name
"United States" %in% WorldCountry@data$name
"United Arab Emirates" %in% WorldCountry@data$name
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- all.immigrants.2017.data$Country
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
if(curr.country %in% WorldCountry@data$name == FALSE) {
new_c <- c(curr.country)
}
}
new_c
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- all.immigrants.2017.data$Country
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
print(curr.country)
if(curr.country %in% WorldCountry@data$name == FALSE) {
new_c <- c(curr.country)
}
}
new_c
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- all.immigrants.2017.data$Country
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
print(curr.country)
if(curr.country %in% WorldCountry@data$name) {
new_c <- c(curr.country)
}
}
new_c
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- all.immigrants.2017.data$Country
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
print(curr.country)
if(curr.country %in% WorldCountry@data$name) {
append(new_c, curr.country)
}
}
new_c
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- all.immigrants.2017.data$Country
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
print(curr.country)
if(curr.country %in% WorldCountry@data$name) {
append(new_c, c(curr.country))
}
}
new_c
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- all.immigrants.2017.data$Country
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
if(curr.country %in% WorldCountry@data$name) {
print(curr.country)
append(new_c, c(curr.country))
}
}
new_c
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- all.immigrants.2017.data$Country
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
if(curr.country %in% WorldCountry@data$name == FALSE) {
print(curr.country)
append(new_c, c(curr.country))
}
}
new_c
View(WorldCountry@data$name)
View(immigrants_nationality)
WorldCountry <-geojsonio::geojson_read("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json", what = "sp")
new_c <- c()
country_list <- unique(immigrants_nationality$Nationality)
for (i in 1:length(country_list)) {
curr.country <- country_list[i]
if(curr.country %in% WorldCountry@data$name == FALSE) {
print(curr.country)
}
}
shiny::runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
WorldCountry$name
all.immigrants.data$Country
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
newobj <- merge(WorldCountry, all.immigrants.2017.data, by.x="name", by.y="Country")
#basemap
Map <- leaflet(newobj) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
quartile_calculation <- newobj@data[order(newobj@data$population), ]
temp_median <- median(quartile_calculation$population)
lower <- quartile_calculation[1:round(nrow(quartile_calculation)/2),]
upper <- quartile_calculation[round((nrow(quartile_calculation)/2)+1):nrow(quartile_calculation),]
lower_median <- median(lower$population)
upper_median <- median(upper$population)
bins <- c(0, lower_median, temp_median, upper_median, max(newobj@data$population))
pal <- colorBin("YlOrRd", domain = newobj@data$population, bins = bins)
#set labels
labels <- sprintf(
"<strong>%s</strong><br/>Population: %g",
newobj@data$name, newobj@data$population) %>% lapply(htmltools::HTML)
#add polygons,labels and mouse over effect
Map %>% addPolygons(
fillColor = ~pal(newobj@data$population),
weight = 1,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = newobj@data$population, opacity = 0.7, title = NULL,
position = "bottomright")
newobj <- merge(WorldCountry, all.immigrants.2017.data, by.x="name", by.y="Country")
#basemap
Map <- leaflet(newobj) %>% addTiles() %>% addPolygons()
#set bin and color for choropleth map
quartile_calculation <- newobj@data[order(newobj@data$population), ]
temp_median <- median(quartile_calculation$population)
lower <- quartile_calculation[1:round(nrow(quartile_calculation)/2),]
upper <- quartile_calculation[round((nrow(quartile_calculation)/2)+1):nrow(quartile_calculation),]
lower_median <- median(lower$population)
upper_median <- median(upper$population)
bins <- c(0, lower_median, temp_median, upper_median, max(newobj@data$population))
pal <- colorBin("YlOrRd", domain = newobj@data$population, bins = bins)
#set labels
labels <- sprintf(
"<strong>%s</strong><br/>Population: %g",
newobj@data$name, newobj@data$population) %>% lapply(htmltools::HTML)
#add polygons,labels and mouse over effect
Map %>% addPolygons(
fillColor = ~pal(newobj@data$population),
weight = 1,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = newobj@data$population, opacity = 0.7, title = NULL,
position = "bottomright")
View(newobj)
View(all.immigrants.2017.data)
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
runApp('Documents/CMU/Spring 2019/36-315/interactive_graphics_project/315-Interactive-Project')
